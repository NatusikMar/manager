'use client';

import React, { useEffect, useState } from 'react';
import './NotesPanel.css';
import EditNoteModal from './EditNoteModal'; // —Å–æ–∑–¥–∞–¥–∏–º —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

export default function NotesPanel({ selectedDate }) {
  const [events, setEvents] = useState([]);
  const [editingEvent, setEditingEvent] = useState(null);

  const formattedDate = selectedDate.toLocaleDateString('en-CA'); // YYYY-MM-DD

  const fetchEvents = async () => {
  try {
    const res = await fetch(`http://localhost:3001/api/events/${formattedDate}`, {
      credentials: 'include', // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ –∫—É–∫–∏ –Ω–µ –ø–æ–π–¥—É—Ç
    });

    if (!res.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${res.status}`);
        }


    const data = await res.json();

    if (Array.isArray(data)) {
      // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      const filtered = data.filter(event => event.event_date === formattedDate);
      setEvents(filtered);
    } else {
      console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
      setEvents([]);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', err);
    setEvents([]);
  }
};



  useEffect(() => {
    fetchEvents();
  }, [formattedDate]);

  const handleDelete = async (id) => {
        const confirmDelete = confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ?');
        if (!confirmDelete) return;

        try {
            const res = await fetch(`http://localhost:3001/api/events/${id}`, {
            method: 'DELETE',
            credentials: 'include', // ‚Üê —Ç–æ–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
            });

            if (res.status === 401) {
            window.location.href = '/';
            return;
            }

            if (res.ok) {
            fetchEvents(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞:', err);
        }
        };


  const handleEdit = (event) => {
    setEditingEvent(event);
  };

  const handleUpdate = () => {
    setEditingEvent(null); // –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
    fetchEvents();         // –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
  };

  return (
    <div className="notes-panel">
      <h3>–ó–∞–º–µ—Ç–∫–∏ –Ω–∞ {formattedDate}</h3>
      <div className="notes-scroll">
        {events.length === 0 ? (
          <p className="empty">–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π</p>
        ) : (
          <ul className="notes-list">
            {events.map(event => (
              <li key={event.id} className="note-item">
                <span className="note-time">
                    {event.event_time && event.event_end_time && (
                    `${event.event_time.slice(0, 5)} ‚Äî ${event.event_end_time.slice(0, 5)}`
                    )}
                    {event.event_time && !event.event_end_time && (
                    `${event.event_time.slice(0, 5)}`
                    )}
                    {!event.event_time && !event.event_end_time && (
                    '–í–µ—Å—å –¥–µ–Ω—å'
                    )}
                </span>
                <span className="note-name">{event.name}</span>
                {event.tag && <span className={`note-tag ${event.tag}`}></span>}
                {event.is_recurring && <span className="note-repeat">üîÅ</span>}
                <button onClick={() => handleEdit(event)}>‚úèÔ∏è</button>
                <button onClick={() => handleDelete(event.id)}>üóëÔ∏è</button>
                </li>

            ))}
          </ul>
        )}
      </div>

      {editingEvent && (
        <EditNoteModal
          event={editingEvent}
          onClose={() => setEditingEvent(null)}
          onUpdated={handleUpdate}
        />
      )}
    </div>
  );
}
